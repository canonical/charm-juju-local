name: Tests

on:
  workflow_call:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]
    paths-ignore:
      - "**.md"
      - "**.rst"

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  lint-unit:
    uses: canonical/bootstack-actions/.github/workflows/lint-unit.yaml@v2
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.10"]
    with:
      python-version: ${{ matrix.python-version }}

  func:
    needs: lint-unit
    name: functional tests
    runs-on: ${{ matrix.runs-on }}
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        runs-on: [[ubuntu-latest]]
        test-command: ['make functional']
    steps:

      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Setup Juju environment
        uses: charmed-kubernetes/actions-operator@main
        with:
          provider: "lxd"
          juju-channel: "3.4/stable"
          charmcraft-channel: "2.x/stable"

      - name: Show juju information
        run: |
          juju version
          juju controllers | grep Version -A 1 | awk '{print $9}'

        # This is used by zaza in the functional tests for non-amd64 architectures (if applicable)
      - name: Set zaza juju model constraints for architecture
        run: |
          if [ "$(uname -m)" = "aarch64" ]; then
            echo "TEST_MODEL_CONSTRAINTS=arch=arm64" >> "$GITHUB_ENV"
          fi

      # - name: Run tests
      #   run: ${{ matrix.test-command }}
      #   env:
      #     TEST_JUJU3: "1"  # https://github.com/openstack-charmers/zaza/pull/653
      #     TEST_JUJU_CHANNEL: ${{ matrix.juju-channel }}

      # Post-tests save output for debugging

      - name: Generate juju crashdumps
        if: always()
        run: |
          set -x
          sudo snap install --classic juju-crashdump
          sudo apt install -y jq uuid

          models="$(juju models --format json | jq -r '.models[]."short-name"')"
          dir="$(mktemp -d)"
          echo "CRASHDUMPS_DIR=$dir" | tee -a "$GITHUB_ENV"
          echo "CRASHDUMPS_ARTEFACT_SUFFIX=$(uuid)-$(uname -m)" | tee -a "$GITHUB_ENV"

          for model in $models; do
            juju status -m "$model"  # show status here for quick debugging
            juju-crashdump --as-root -m "$model" -u "$model-$(uname -m)" -o "$dir"
          done

      - name: Upload juju crashdumps
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: "juju-crashdumps-${{ env.CRASHDUMPS_ARTEFACT_SUFFIX }}"
          path: "${{ env.CRASHDUMPS_DIR }}/juju-crashdump-*.tar.xz"
